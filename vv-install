<?php
#/usr/bin/php
/**
 * @param $blueprint
 * @param string $path
 */
function main( $blueprint, $path = 'htdocs' ) {
	echo "Setting up blueprint $blueprint...\n";
	$blueprints = json_decode( file_get_contents( "vv-blueprints.json" ) );

	if ( ! empty( $blueprints->$blueprint->themes ) ) {
		echo "Installing themes...\n";
		foreach ( $blueprints->$blueprint->themes as $theme ) {
			install( 'theme', $theme, $path );
		}
	}
	if ( ! empty( $blueprints->$blueprint->plugins ) ) {
		echo "Installing plugins...\n";
		foreach ( $blueprints->$blueprint->plugins as $plugin ) {
			install( 'plugin', $plugin, $path );
		}
	}
	if ( ! empty( $blueprints->$blueprint->mu_plugins ) ) {
		echo "Installing mu-plugins...\n";
		foreach ( $blueprints->$blueprint->mu_plugins as $mu_plugin ) {
            install( 'mu-plugin', $mu_plugin, $path );
        }
    }
    if ( ! empty( $blueprints->$blueprint->options ) ) {
        echo "Setting up options...\n";
        foreach( $blueprints->$blueprint->options as $option ) {
            add_option( $option );
        }
    }
    if ( ! empty( $blueprints->$blueprint->defines ) ) {
        echo "Adding constants to wp-config.php...";
        foreach( $blueprints->$blueprint->defines as $define ) {
            add_define( $define, $path );
        }
    }

    echo "Blueprint set up.\n";
}

/**
 * @param $type
 * @param $object
 * @param $path
 */
function install ( $type, $object, $path ) {
    /**
     * Set up the base command, make the wp-content folders and move into them
     * (-p: no error if existing, make parent directories as needed)
     */
    $command = "mkdir -p $path/wp-content/{$type}s && cd $path/wp-content/{$type}s";

    /**
     * Set up the string variable that will hold the WP-CLI options
     */
    $wpcli_options = "";

    /**
     * Get the target object we need to install
     */
    $target = $object;

    /**
     * This boolean tells if this blueprint is WP-CLI compatible.
     */
    $wpcli_compat = false;

    /**
     * If our target is an object, get the location of that object
     * and set up the WP-CLI options for this installation
     * Documentation: http://wp-cli.org/commands/plugin/install/ && http://wp-cli.org/commands/theme/install/
     *
     * If the target is not an object, this is a target object from an old blueprint. This way we keep backwards compatibility
     */
    if( is_object( $target ) ) {
        $target = $object->location;
        $wpcli_compat = true;

        if ( isset( $object->version ) ) {
            $wpcli_options .= " --version=$object->version";
        }
        if ( isset( $object->force ) && $object->force == true ) {
            $wpcli_options .= " --force";
        }
        if ( isset( $object->activate ) && $object->activate == true ) {
            $wpcli_options .= " --activate";
        }
        if ( isset( $object->activate_network ) && $object->activate_network == true && $type == 'plugin' ) {
            $wpcli_options .= " --activate-network";
        }
    }

    /**
     * Give feedback to the console
     */
    echo "  Installing ".$target.$wpcli_options."...\n";

    /**
     * Set up the rest of the command for this installation depending
     * on the type of installation we are going to do
     */
    // Clone a git repository
    if ( strpos( $target, '.git' ) !== false ) {
        $command .= " && git clone $target";
        if( $wpcli_compat ) {
            // Now determine the name of the plugin for activation
            $target_parts = explode( '/', $target );
            $git_file = end( $target_parts );
            $plugin_name = str_replace( '.git', '', $git_file );

            // Add WP CLI command for activation with our newly determined plugin name
            $command .= " && wp --allow-root $type install $plugin_name";

            // Add WP CLI options to the command
            $command .= $wpcli_options;
        }
    }
    // Download a zip file from a specified location
    elseif ( strpos( $target, '.zip' ) !== false ) {
        $command .= " && wp --allow-root $type install $target";
        if( $wpcli_compat ) {
            $command .= $wpcli_options;
        }
    }
    // Download a git repository based on username and repository name
    elseif ( strpos( $target, '/' ) !== false ) {
        // Get the folder name
        $exploded = explode( "/", $target );
        $folder = $exploded[1];

        // Check if the blueprint is WP-CLI compatible
        if( !$wpcli_compat ) {
            $command .= " && wp --allow-root $type install https://github.com/$target/archive/master.zip && pwd && mv $folder-master $folder";
        } else {
            $command .= " && curl -s -S \"https://codeload.github.com/$target/tar.gz/master\" -o \"$folder-master.tar.gz\"".    // Download the tarball from the repository, do it silent but show errors
		" && tar xpvf $folder-master.tar.gz". // Unzip the file
		" && pwd". // Print working directory
		" && mv $folder-master $folder" . // Move the files so te folder has the same name as the repository
		" && rm $folder-master.tar.gz"; // Remove our file

            // Activate the plugin using WP-CLI
            if ( isset( $object->activate ) && $object->activate == true ) {
                $command .= " && wp --allow-root $type activate $folder";
            }
            if ( isset( $object->activate_network ) && $object->activate_network == true && $type == 'plugin' ) {
                $command .= " && wp --allow-root $type activate $folder --network";
            }
        }
    }
    // Download the plugin from the WP Plugin repository based on the URL slug
    else {
        $command .= " && wp --allow-root $type install $target";
        if( $wpcli_compat ) {
            $command .= $wpcli_options;
        }
    }

    /**
     * Finish up the command
     */
    $command .= " && cd -";

    /**
     * Execute the command
     */
    exec( $command );
}

/**
 * @param $option
 */
function add_option( $option ) {
    $object = explode("::", $option );
    $a = $object[0];
    $b = $object[1];
    exec( "wp --allow-root option delete '$a'" );
    exec( "wp --allow-root option add '$a' '$b'" );
    echo "  Insert settings $a...\n";
}

/**
 * @param $object
 * @param $path
 */
function add_define( $object, $path ) {
    $object = explode( "::", $object );
    echo "  Insert constants $object[0]...\n";

    /**
     * Changed is_bool to a string comparison because is_bool only works for real booleans, not strings
     * Reference: http://stackoverflow.com/questions/7336861/how-to-convert-string-to-boolean-php
     */
    if( strtolower( $object[1] ) == 'true' || strtolower( $object[1] ) == 'false' ) {
        exec( '     echo "$(sed "34a\\
define(\"'. $object[0] . '\",' . $object[1]  . ');
" ./' . $path . '/wp-config.php);" > ./' . $path . '/wp-config.php' );
    } else {
        exec( '		echo "$(sed "34a\\
define(\"'. $object[0] . '\",\"' . $object[1]  . '\");
" ./' . $path . '/wp-config.php);" > ./' . $path . '/wp-config.php' );
    }
}

main( $argv[1], $argv[2] );
