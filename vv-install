#!/usr/bin/php
<?php
/**
 * Parses a JSON-formatted blueprint and applies its configuration.
 *
 * @param string $blueprint Name of the blueprint to apply.
 * @param string $path
 * @param string $site_name
 * @param string $domain
 */
function main( $blueprint, $path = 'htdocs', $site_name, $domain ) {
	echo "Setting up blueprint $blueprint...\n";
	$blueprints = json_decode( file_get_contents( 'vv-blueprints.json' ) );

	// Add constants first, so they're available to plugins and themes
	// upon activation or future manipulation.
	if ( ! empty( $blueprints->$blueprint->defines ) ) {
		echo 'Adding constants to wp-config.php...';
		foreach ( $blueprints->$blueprint->defines as $define ) {
			add_define( $define, $path );
		}
	}
	if ( ! empty( $blueprints->$blueprint->network_options ) ) {
		echo "Setting up network options...\n";
		foreach ( $blueprints->$blueprint->network_options as $option ) {
			add_network_option( $option );
		}
	}

	$site_blueprints = get_site_blueprints( $blueprints->$blueprint );

	// Insall network-wide and mainsite components.
	install_site_from_blueprint( $site_blueprints->mainsite, $path, $site_name, $domain );

	if ( ! empty( $site_blueprints->subsites ) ) {
		echo 'Setting up subsites...';
		foreach ( $site_blueprints->subsites as $subsite_slug => $subsite ) {
			add_site( $subsite_slug, $subsite, $domain );
			install_site_from_blueprint( $subsite, $path, $site_name, $domain, $subsite_slug );
		}
		echo 'Subsites set up.';
	}

}

/**
 * @param object $site_blueprint
 * @param string $path
 * @param string $site_name
 * @param string $domain
 * @param null|string $subsite_slug
 */
function install_site_from_blueprint( $site_blueprint, $path, $site_name, $domain, $subsite_slug = null ) {

	if ( ! empty( $site_blueprint->demo_content ) ) {
		echo "Importing content...\n";
		activate_wordpress_importer();
		foreach ( $site_blueprint->demo_content as $demo ) {
			import_demo_content( $demo, $path, $site_name, $domain, $subsite_slug );
		}
		echo "  Import Complete!\n";
	}
	if ( ! empty( $site_blueprint->themes ) ) {
		echo "Installing themes...\n";
		install_themes( $site_blueprint->themes, $path, $site_name, $domain, $subsite_slug );
	}
	if ( ! empty( $site_blueprint->plugins ) ) {
		echo "Installing plugins...\n";
		install_plugins( $site_blueprint->plugins, $path, $site_name, $domain, $subsite_slug );
	}
	if ( ! empty( $site_blueprint->mu_plugins ) ) {
		echo "Installing mu-plugins...\n";
		install_mu_plugins( $site_blueprint->mu_plugins, $path, $site_name, $domain, $subsite_slug );
	}
	if ( ! empty( $site_blueprint->options ) ) {
		echo "Setting up options...\n";
		foreach ( $site_blueprint->options as $option ) {
			add_option( $option, $domain, $subsite_slug );
		}
	}
	if ( ! empty( $site_blueprint->widgets ) ) {
		echo "Setting up widgets...\n";
		foreach ( $site_blueprint->widgets as $widget ) {
			add_widget( $widget, $domain, $subsite_slug );
		}
	}

	echo "Blueprint set up.\n";
}

/**
 * Returns the blueprint with the subsite definitions as a sibling
 * of the mainsite, rather than a child.
 *
 * @param object $blueprint
 *
 * @return object
 */
function get_site_blueprints( $blueprint ) {
	$site_blueprints = new stdClass();
	if ( ! empty( $blueprint->sites ) ) {
		$site_blueprints->subsites = $blueprint->sites;
		unset( $blueprint->sites );
	}
	$site_blueprints->mainsite = $blueprint;
	return $site_blueprints;
}

/**
 * Creates a subsite in Multisite using WP-CLI
 *
 * @param string $slug Name of the site.
 * @param stdClass $subsite Subsite definition from blueprint
 * @param string $domain
 */
function add_site( $slug, $subsite, $domain ) {
	$command = 'wp site create --allow-root --slug=' . escapeshellarg( $slug );
	if ( ! empty( $subsite->title ) ) {
		$command .= ' --title=' . escapeshellarg( $subsite->title );
	}
	if ( ! empty( $subsite->email ) ) {
		$command .= ' --email=' . escapeshellarg( $subsite->email );
	}
	if ( ! empty( $subsite->network_id ) ) {
		$command .= ' --network_id=' . escapeshellarg( $subsite->network_id );
	}
	if ( ! empty( $subsite->private ) && true === $subsite->private ) {
		$command .= ' --private';
	}
	if ( ! empty( $subsite->porcelain ) && true === $subsite->porcelain ) {
		$command .= ' --porcelain';
	}
	system( $command, $return_var );
	if ( 0 === $return_var ) {
		$fh = fopen( 'vvv-hosts', 'a' );
		fwrite( $fh, "$slug.$domain" . PHP_EOL );
		fclose( $fh );
	}
}

/**
 * Installs themes.
 *
 * @param stdClass[] $objects
 * @param string $path
 * @param string $site_name
 * @param string $domain
 * @param string $subsite_slug
 */
function install_themes( $objects, $path, $site_name, $domain, $subsite_slug = null) {
	foreach ( $objects as $theme ) {
		install( 'theme', $theme, $path, $site_name, $domain, $subsite_slug );
	}
}

/**
 * Installs plugins.
 *
 * @param stdClass[] $objects
 * @param string $path
 * @param string $site_name
 * @param string $domain
 * @param string $subsite_slug
 */
function install_plugins( $objects, $path, $site_name, $domain, $subsite_slug = null) {
	foreach ( $objects as $plugin ) {
		install( 'plugin', $plugin, $path, $site_name, $domain, $subsite_slug );
	}
}

/**
 * Installs mu-plugins.
 *
 * @param stdClass[] $objects
 * @param string $path
 * @param string $site_name
 * @param string $domain
 * @param string $subsite_slug
 */
function install_mu_plugins( $objects, $path, $site_name, $domain, $subsite_slug = null) {
	foreach ( $objects as $mu_plugin ) {
		install( 'mu-plugin', $mu_plugin, $path, $site_name, $domain, $subsite_slug );
	}
}

/**
 * Installs specific theme or plugin into the WordPress site.
 *
 * Possibly activates it, too, depending on Blueprint configuration.
 *
 * @param string $type
 * @param stdClass $object
 * @param string $path
 * @param string $site_name
 * @param string $domain
 * @param string $subsite_slug
 */
function install( $type, $object, $path, $site_name, $domain, $subsite_slug = null ) {
	/**
	 * Set up the base command, make the wp-content folders and move into them
	 * (-p: no error if existing, make parent directories as needed)
	 */
	$command = 'mkdir -p ' . escapeshellarg( "$path/wp-content/{$type}s" ) . ' && cd ' . escapeshellarg( "$path/wp-content/{$type}s" );

	/**
	 * Set up the string variable that will hold the WP-CLI options
	 */
	$wpcli_options = '';

	/**
	 * Get the target object we need to install
	 */
	$target = $object;

	/**
	 * This boolean tells if this blueprint is WP-CLI compatible.
	 */
	$wpcli_compat = false;

	/**
	 * If our target is an object, get the location of that object
	 * and set up the WP-CLI options for this installation
	 * Documentation: http://wp-cli.org/commands/plugin/install/ && http://wp-cli.org/commands/theme/install/
	 *
	 * If the target is not an object, this is a target object from an old blueprint. This way we keep backwards compatibility
	 */
	if ( is_object( $target ) ) {
		$target = $object->location;

		// Allow for sitename and sitedomain placeholders inside of a blueprints file
		$target = str_replace( 'SITENAME', $site_name,  $target );
		$target = str_replace( 'SITEDOMAIN', $domain,  $target );

		$wpcli_compat = true;

		if ( isset( $object->version ) ) {
			$wpcli_options .= ' --version=' . escapeshellarg( $object->version );
		}
		if ( isset( $object->force ) && true == $object->force ) {
			$wpcli_options .= ' --force';
		}
		if ( isset( $object->activate ) && true == $object->activate ) {
			$wpcli_options .= ' --activate';
		}
		if ( isset( $object->activate_network ) && true == $object->activate_network && 'plugin' == $type ) {
			$wpcli_options .= ' --activate-network';
		}
		if ( ! empty( $subsite_slug ) ) {
			$wpcli_options .= ' --url=' . escapeshellarg( "{$subsite_slug}.{$domain}" );
		}

	}

	/**
	 * Give feedback to the console
	 */
	echo '  Installing ' . $target . $wpcli_options . "...\n";

	/**
	 * Set up the rest of the command for this installation depending
	 * on the type of installation we are going to do
	 */
	// Clone a git repository
	if ( false !== strpos( $target, '.git' ) ) {
		$command .= ' && git clone ' . escapeshellarg( $target );
		if ( $wpcli_compat ) {
			$command .= $wpcli_options;
		}
	}
	// Download a zip file from a specified location
	elseif ( false !== strpos( $target, '.zip' ) ) {
		$command .= ' && wp --allow-root ' . escapeshellarg( $type ) . ' install ' . escapeshellarg( $target );
		if ( $wpcli_compat ) {
			$command .= $wpcli_options;
		}
	}
	// Download a git repository based on username and repository name
	elseif ( false !== strpos( $target, '/' ) ) {
		// Get the folder name
		$exploded = explode( '/', $target );
		$folder = $exploded[1];

		// Check if the blueprint is WP-CLI compatible
		if ( ! $wpcli_compat ) {
			$command .= ' && wp --allow-root ' . escapeshellarg( $type ) . ' install ' . escapeshellarg( "https://github.com/$target/archive/master.zip" ) . ' && pwd && mv ' . escapeshellarg( "$folder-master" ) . ' ' . escapeshellarg( $folder );
		} else {
			$command .= ' && curl -s -S ' . escapeshellarg( "https://codeload.github.com/$target/tar.gz/master" ) . ' -o ' . escapeshellarg( "$folder-master.tar.gz" ).	// Download the tarball from the repository, do it silent but show errors
			' && tar xpvf ' . escapeshellarg( "$folder-master.tar.gz" ). // Unzip the file
			' && pwd'. // Print working directory
			' && mv ' . escapeshellarg( "$folder-master" ) . ' ' . escapeshellarg( $folder ). // Move the files so te folder has the same name as the repository
			' && rm ' . escapeshellarg( "$folder-master.tar.gz" ); // Remove our file

			// Activate the plugin using WP-CLI
			if ( isset( $object->activate ) && true == $object->activate ) {
				$command .= ' && wp --allow-root ' . escapeshellarg( $type ) . ' activate ' . escapeshellarg( $folder );
			}
			if ( isset( $object->activate_network ) && true == $object->activate_network && 'plugin' == $type ) {
				$command .= ' && wp --allow-root ' . escapeshellarg( $type ) . ' activate ' . escapeshellarg( $folder ) . ' --network';
			}
		}
	}
	// Download the plugin from the WP Plugin repository based on the URL slug
	else {
		$command .= ' && wp --allow-root ' . escapeshellarg( $type ) . ' install ' . escapeshellarg( $target );
		if ( $wpcli_compat ) {
			$command .= $wpcli_options;
		}
	}

	// Enable themes in Multisite install using WP-CLI
	if ( isset( $object->enable ) && 'theme' == $type ) {
		$command .= ' && wp --allow-root theme enable ' . escapeshellarg( $folder );
	}
	if ( isset( $object->enable_network ) && true == $object->enable_network && 'theme' == $type ) {
		$command .= ' && wp --allow-root theme enable ' . escapeshellarg( $folder ) . ' --network';
	}

	/**
	 * Finish up the command
	 */
	$command .= ' && cd -';

	/**
	 * Execute the command
	 */
	exec( $command );
}

/**
 * Reads a double-colon separated option from a blueprint.
 *
 * @param $opt_string
 *
 * @return array
 */
function parse_option( $opt_string ) {
	$x = explode( '::', $opt_string );
	$key = array_shift( $x );
	$val = implode( '::', $x );
	return array( $key => $val );
}

/**
 * @todo Make the network ID a variable, too. Right now it's hardcoded as `1`.
 *
 * @param $option
 */
function add_network_option( $option ) {
	$opt = parse_option( $option );
	$name = key( $opt );
	exec( 'wp --allow-root network meta delete 1 ' . escapeshellarg( $name ) );

	$vals = array_pop( $opt );
	$php_vals = @unserialize( $vals );
	if ( false === $php_vals ) {
		exec( 'wp --allow-root network meta add 1 ' . escapeshellarg( $name ) . ' ' . escapeshellarg( $vals ) );
	} else {
		$json = json_encode( $php_vals );
		exec( 'wp --allow-root network meta add 1 ' . escapeshellarg( $name ) . ' ' . escapeshellarg( $json) . ' --format=json');
	}

	echo "  Insert network settings $name...\n";
}

/**
 * @param string $option
 * @param string $domain
 * @param null|string $subsite_slug
 */
function add_option( $option, $domain = '' , $subsite_slug = null ) {
	$opt = parse_option( $option );
	$name = key( $opt );
	$cmd = 'wp --allow-root option delete ' . escapeshellarg( $name );
	if ( ! empty( $subsite_slug ) ) {
		$cmd .= ' ' . escapeshellarg( "--url={$subsite_slug}.{$domain}" );
	}
	exec( $cmd );

	$vals = array_pop( $opt );
	$php_vals = @unserialize( $vals );
	if ( false === $php_vals ) {
		$cmd = 'wp --allow-root option add ' . escapeshellarg( $name ) . ' ' . escapeshellarg( $vals );
	} else {
		$json = json_encode( $php_vals );
		$cmd = 'wp --allow-root option add ' . escapeshellarg( $name ) . ' ' . escapeshellarg( $json ) . ' --format=json';
	}
	if ( ! empty( $subsite_slug ) ) {
		$cmd .= ' ' . escapeshellarg( "--url={$subsite_slug}.{$domain}" );
	}
	exec( $cmd );

	echo "  Insert settings $name...\n";
}

function activate_wordpress_importer() {
	system( 'wp --allow-root plugin is-installed wordpress-importer', $importer_missing );
	if ( $importer_missing ) {
		exec( 'wp --allow-root plugin install wordpress-importer --activate' );
	}
}

/**
 * Downloads a WordPress WXR file and imports it with the WordPress Importer plugin.
 *
 * @param string $demo
 * @param string $path
 * @param string $site_name
 * @param string $domain
 * @param null|string $subsite_slug
 */
function import_demo_content( $demo, $path, $site_name, $domain, $subsite_slug = null ) {
	$opt = parse_option( $demo );
	$link = array_pop( $opt );
	$cmd = 'curl -s ' . escapeshellarg( $link ) . ' > import.xml && wp import import.xml --authors=create --allow-root';
	if ( ! empty( $subsite_slug ) ) {
		$cmd .= ' ' . escapeshellarg( "--url={$subsite_slug}.{$domain}" );
	}
	$cmd .= ' && rm import.xml';
	exec( $cmd );
}

/**
 * @param $object
 * @param $path
 */
function add_define( $object, $path ) {
	$opt = parse_option( $object );
	$def = key( $opt );
	$val = array_pop( $opt );
	echo "  Insert constants $def...\n";

	/**
	 * Changed is_bool to a string comparison because is_bool only works for real booleans, not strings
	 * Reference: http://stackoverflow.com/questions/7336861/how-to-convert-string-to-boolean-php
	 */
	if ( 'true' == strtolower( $val ) || 'false' == strtolower( $val ) ) {
		exec( '     echo "$(sed "34a\\
define(\"'. $def . '\",' . $val  . ');
" ./' . $path . '/wp-config.php);" > ./' . $path . '/wp-config.php' );
	} else {
		exec( '		echo "$(sed "34a\\
define(\"'. $def . '\",\"' . $val  . '\");
" ./' . $path . '/wp-config.php);" > ./' . $path . '/wp-config.php' );
	}
}

/**
 * @param object $object
 * @param string $domain
 * @param null|string $subsite_slug
 */
function add_widget( $object, $domain = '', $subsite_slug = null ) {
	echo "  Adding widget {$object->name} to {$object->location}...\n";
	$cmd = sprintf(
		'wp --allow-root widget add %s %s',
		escapeshellarg( $object->name ),
		escapeshellarg( $object->location )
	);
	if ( isset($object->position) ) {
		$cmd .= ' ' . escapeshellarg( $object->position );
	}
	if ( isset( $object->options ) ) {
		foreach ( $object->options as $key => $value ) {
			$cmd .= ' ' . escapeshellarg( "--$key=$value" );
		}
	}
	if ( ! empty( $subsite_slug ) ) {
		$cmd .= ' ' . escapeshellarg( "--url={$subsite_slug}.{$domain}" );
	}
	exec( $cmd );
}

main( $argv[1], $argv[2], $argv[3], $argv[4] );
