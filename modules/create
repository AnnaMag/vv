#!/usr/bin/env bash

# @todo go through this and optimize / replace
site_creation_questions() {
	hook "pre_site_creation_wizard"
	files_only_text=''
	if [[ "$files_only" = "true" ]]; then
		files_only_text=" (file creation only)"
	fi
	info "New VVV Site Setup$files_only_text"

	# Prompt user for vars
	# =============================================================================

	# Get site dir name if not supplied as argument
	if [ ! -z "$site" ]; then
		if [ -f "$path/config/nginx-config/sites/$site.conf" ]; then
			error "Site $site already exists. Remove config/nginx-config/sites/$site.conf to run setup again."
			unset site
		elif [ -d "$path/$sites_folder/$site" ]; then
			warning "Directory $path/$sites_folder/$site already exists. Existing VVV configuration files will be overwritten."
		fi
	fi
	while [ -z "$site" ]; do
		prompt "Name of new site directory"
		read -r site

		if [ -z "$site" ]; then
			error "You must enter a directory name."
		elif [ -f "$path/config/nginx-config/sites/$site.conf" ]; then
			error "Site $site already exists. Remove config/nginx-config/sites/$site.conf to run setup again."
			unset site
		elif [ -d "$path/$sites_folder/$site" ]; then
			warning "Directory $path/$sites_folder/$site already exists. Existing VVV configuration files will be overwritten."
		fi
	done

	# Get database name
	db_name=$site

	# Get web root of site
	if [ -z "$web_root" ]; then
		web_root="htdocs"
	fi

	if [ "$no_wp" = "false" ]; then
		if [[ -f "$path"/vv-blueprints.json ]]; then
			# Get local URL
			if [ "$use_defaults" = "false" ]; then
				if [ -z "$blueprint" ]; then
					prompt "Blueprint to use (leave blank for none)"
					read -r blueprint
					if [ -z "$blueprint" ]; then
						unset blueprint
					fi
				fi
			fi
		fi
	fi

	# Get local URL
	while [ -z "$domain" ]; do
		if [ "$use_defaults" = "false" ]; then
			prompt "Domain to use (leave blank for $site.dev)"
			read -r domain
		fi
		if [ -z "$domain" ]; then
			domain="$site.dev"
		fi
	done

	if [ "$no_wp" = "false" ]; then
		if [ ! -z "$version" ]; then
			# Attempt to verify the existence of the version (hacky)
			if curl -s http://codex.wordpress.org/Version_"$version" | grep --color=never 'currently no text' > /dev/null; then
				error "Version $version not found, try again"
				unset version
			else
				installversion=" --version=$version"
			fi
		fi
		use_trunk="false"
		while [[ -z "$version" ]]; do
			# Get WordPress version
			if [ "$use_defaults" = "false" ]; then
				prompt "WordPress version to install (leave blank for latest version or trunk for trunk/nightly version)"
				read -r version
			fi
			if [ -z "$version" ]; then
				installversion=""
				version="(release version)"
			elif [ "$version" = "trunk" ]; then
				installversion=""
				version="(release version)"
				use_trunk="true"
			else
				# Attempt to verify the existence of the version (hacky)
				if curl -s http://codex.wordpress.org/Version_"$version" | grep --color=never 'currently no text' > /dev/null; then
					error "Version \"$version\" not found, try again"
					unset version
				else
					installversion=" --version=$version"
				fi
			fi
		done

		if [ -z "$multisite" ]; then
			if [ "$use_defaults" = "false" ]; then
				prompt "Install as multisite? (y/N)"
				read -r multisite
			fi
			if [[ $multisite = 'y' ]]; then
				install_text='multisite-install'
			else
				install_text='install'
			fi
		fi

		if [[ $multisite = "y" ]]; then
			while [[ -z $ms_type ]]; do
				if [ "$use_defaults" = "false" ]; then
					prompt "Install as subdomain or subdirectory? "
					read -r ms_type
				fi
				if [[ $ms_type != 'subdomain' && $ms_type != 'subdirectory' ]]; then
					error "Type must be subdomain or subdirectory."
					unset ms_type
				fi
			done
		fi

		if [[ $ms_type = 'subdomain' ]]; then
			install_text='multisite-install --subdomains'
		fi

		if [[ ! -z $git_repo && -d "$path/$sites_folder/$site" ]]; then
			error "$path/$sites_folder/$site already exists. Skipping git clone."
			unset git_repo
		elif [[ -z "$git_repo" && ! -d "$path/$sites_folder/$site" ]]; then
			if [ "$use_defaults" = "false" ]; then
				prompt "Git repo to clone as wp-content (leave blank to skip)"
				read -r git_repo
			fi
		fi

		if [ -z "$db_import" ]; then
			if [ "$use_defaults" = "false" ]; then
				prompt "Local SQL file to import for database (leave blank to skip)"
				read -r db_import
			fi
		fi

		if [ -z "$remove_defaults" ]; then
			if [ "$use_defaults" = "false" ]; then
				prompt "Remove default themes and plugins? (y/N)"
				read -r remove_defaults
			fi
		fi

		add_placeholder_content="";
		if [ -z "$placeholder_content" ]; then
			if [ "$use_defaults" = "false" ]; then
				prompt "Add sample content to site (y/N)"
				read -r placeholder_content
			fi
			if [[ $placeholder_content = "y" ]]; then
				add_placeholder_content="curl -s https://raw.githubusercontent.com/manovotny/wptest/master/wptest.xml > import.xml && wp plugin install wordpress-importer --allow-root  && wp plugin activate wordpress-importer --allow-root  && wp import import.xml --authors=skip --allow-root && rm import.xml"
			fi
		fi

		# Ask if WP_DEBUG should be turned on
		while [ -z "$wp_debug" ]; do
			if [ "$use_defaults" = "false" ]; then
				prompt "Enable WP_DEBUG and WP_DEBUG_LOG (y/N)"
				read -r wp_debug
			fi
			if [[ $wp_debug != 'y' && $wp_debug != 'n' ]]; then
				wp_debug="n"
			fi
		done

		if [[ $image_proxy = "true" ]]; then
			while [ -z "$live_site_url" ]; do
				if [ "$use_defaults" = "false" ]; then
					prompt "Live site URL (no http:// or trailing slash)"
					read -r live_site_url
				fi
			done
		fi
	fi

	if [[ -z "$username" ]]; then
		username="admin"
	fi
	if [[ -z "$password" ]]; then
		password="password"
	fi
	if [[ -z "$email" ]]; then
		email="admin@localhost.dev"
	fi

	hook "post_site_creation_wizard"
}

confirm_site_creation() {
	# Inform the user of what's about to happen and give them a chance to back out
	# =============================================================================
	info "\nAbout to perform the following:"
	# @ TODO
	echo -e "* Halt Vagrant (if running)\n* Create directory $site in $path/$sites_folder\n* Create files vvv-init.sh, wp-cli.yml, and vvv-hosts in directory $site\n* Create file $site.conf in $path/config/nginx-config/sites"
	if [[ -z "$files_only" ]]; then
		echo -e "* Run \`vagrant up --provision\` to initialize site"
	else
		warning "\nNote: You will need to run \`vagrant up --provision\` to initialize the new site before $domain will load in a browser."
	fi

	info "\nProvisioning Vagrant will do the following:"
	if [ "$no_wp" = "false" ]; then
		echo -e "* Create database $site\n* Install WordPress $version in the $web_root directory\n* Make the site visible at $domain"
	fi

	info "\n"
	while [ -z "$continue_create" ]; do
		prompt "Continue (y/n)? "
		read -r continue_create

		if [[ $continue_create = 'n' ]]; then
			error "Site setup aborted."
			exit
		elif [[ $continue_create != 'y' ]]; then
			error "Answer y or n."
			unset continue_create
		fi
	done

	success "New VVV setup starting for site '$site'"
	cd "$path" || error "Could not change directory."
	if [[ -z "$files_only" ]]; then
		info "Running vagrant halt"
		hook "pre_creation_pre_vagrant_halt"
		vagrant halt
	fi
}

create_site_files(){
	hook "pre_create_site_files" "$site" "$domain" "$path"
	# Create site folder with vvv-init.sh file
	# =============================================================================
	cd "$path"/"$sites_folder" || error "Could not change directory."
	info "Creating site directory, wp-cli.yml, and vvv-init.sh file... "
	if [ ! -d "$site" ]; then
		mkdir "$site"
	fi
	cd "$site" || error "Could not change directory."

	if [ "$no_wp" = "false" ]; then
		printf "path: %s" "$web_root" > wp-cli.yml
	fi

	wp_debug_text=''
	if [[ $wp_debug = 'y' ]]; then
		wp_debug_text=" --extra-php <<PHP
define('WP_DEBUG', true);
define('WP_DEBUG_DISPLAY', false);
define('WP_DEBUG_LOG', true);
define('SCRIPT_DEBUG', true);
define('JETPACK_DEV_DEBUG', true);
PHP"
	fi

	blueprint_text=''
	if [[ ! -z "$blueprint" ]]; then
		cp "$path"/vv-blueprints.json "$path"/"$sites_folder"/"$site"/vv-blueprints.json
		hook "pre_blueprint_text_output"
		blueprint_text="curl -o vv-install -s https://raw.githubusercontent.com/bradp/vv/vv-install/vv-install && php vv-install $blueprint $web_root $site $domain && rm vv-blueprints.json"
		hook "post_blueprint_text_output"
	fi

	if [[ ! -z "$db_import" ]]; then
		hook "pre_site_creation_db_import"
		cp "$db_import" "$path"/"$sites_folder"/"$site"/"$site".sql
		hook "post_site_creation_db_import"
	fi

	db_init=""
	if [[ ! -z "$db_import" ]]; then
		db_init="wp db import ../$site.sql --allow-root && rm ../$site.sql"
	fi

	hooked_pre_vvv_init_no_wp=$(hook "hooked_pre_vvv_init_no_wp")
	hooked_extra_wp_vvv_init_no_wp=$(hook "hooked_extra_wp_vvv_init_no_wp")
	hooked_post_vvv_init_no_wp=$(hook "hooked_post_vvv_init_no_wp")

	if [ "$no_wp" = "true" ]; then
		{
			echo "$hooked_pre_vvv_init_no_wp"
			echo "if [ ! -d \"./$web_root\" ]; then"
			echo "  mkdir ./$web_root"
			echo "fi"
			echo "cd ./$web_root"
			echo "$hooked_extra_wp_vvv_init_no_wp"
			echo "$hooked_post_vvv_init_no_wp"
		} >> vvv-init.sh
	fi

	if [ "$no_wp_with_db" = "true" ]; then
		if [ ! -e "$path"/database/init-custom.sql ]; then
			touch "$path"/database/init-custom.sql
		fi
		printf "\nCREATE DATABASE IF NOT EXISTS \`%s\`;\n GRANT ALL PRIVILEGES ON \`%s\`.* TO 'wp'@'localhost' IDENTIFIED BY 'wp';\n" "$db_name" "$db_name" >> "$path"/database/init-custom.sql

		if [[ ! -z "$db_import" ]]; then
			{
				echo "$hooked_pre_vvv_init_no_wp"
				echo "if [ ! -d \"$web_root/wp-admin\" ]; then"
				echo "	echo 'Making the correct directories and adding DB in $site/$web_root...'"
				echo "	if [ ! -d \"./$web_root\" ]; then"
				echo "		mkdir ./$web_root"
				echo "	fi"
				echo "	cd ./$web_root"
				echo "	$db_init"
				echo "	"
				echo "	$hooked_extra_wp_vvv_init_no_wp"
				echo "	cd -"
				echo "$blueprint_text"
				echo "fi"
				echo "$hooked_post_vvv_init_no_wp"
			} >> vvv-init.sh
		fi
	fi

	if [ "$no_wp" = "false" ]; then
		# Create SQL commands for database creation
		# =============================================================================
		if [ ! -e "$path"/database/init-custom.sql ]; then
			touch "$path"/database/init-custom.sql
		fi

		maybe_remove_defaults=""
		if [[ "$remove_defaults" = "y" ]]; then
			maybe_remove_defaults="wp theme delete twentythirteen --allow-root; wp theme delete twentyfourteen --allow-root; wp theme delete twentyfifteen --allow-root; wp theme delete twentysixteen --allow-root; wp plugin delete hello --allow-root; wp plugin delete akismet --allow-root; git checkout HEAD ."
		fi

		maybe_download_search_and_replace=""
		if [[ "$download_search_and_replace" = "true" ]]; then
			maybe_download_search_and_replace="wget https://github.com/interconnectit/Search-Replace-DB/archive/master.zip && unzip master.zip && rm master.zip"
		fi

		wp_db_prefix="wp_"
		if [[ ! -z "$db_prefix" ]]; then
			wp_db_prefix=$db_prefix
		fi

		wp_db_lang="en_US"
		if [[ ! -z "$db_lang" ]]; then
			wp_db_lang=$db_lang
		fi

		install_method="wp core download --locale=$wp_db_lang --allow-root $installversion"
		config="wp core config --dbname=\"$db_name\" --dbuser=wp --dbpass=wp --dbhost=\"localhost\" --dbprefix=$wp_db_prefix --locale=$wp_db_lang --allow-root$wp_debug_text"
		core="wp core $install_text --url=$domain --title=\"$site\" --admin_user=$username --admin_password=$password --admin_email=$email --allow-root"
		if [ "$wpskeleton" = "true" ]; then
			install_method="git clone --recursive https://github.com/markjaquith/WordPress-Skeleton.git . "
			config="echo \"<?php define( 'DB_NAME', '$db_name' ); define( 'DB_USER', 'wp' ); define( 'DB_PASSWORD', 'wp' ); define( 'DB_HOST', 'localhost' );\" >> local-config.php"
			core=""
		fi
		maybe_trunk=""
		if [ "$use_trunk" = "true" ];then
			maybe_trunk="wp core update https://wordpress.org/nightly-builds/wordpress-latest.zip --allow-root"
		fi

		if [ "$bedrock_init" = "true" ]; then
			install_method="composer create-project roots/bedrock htdocs"
			config="printf \"DB_NAME=$db_name\nDB_USER=wp\nDB_PASSWORD=wp\nDB_HOST=localhost\n\nWP_ENV=development\nWP_HOME=http://$domain\nWP_SITEURL=http://$domain/wp\" >> htdocs/.env"
			core="$core --path=\"htdocs/web/wp\""
		fi
		hook "pre_write_vvv_init"
		printf "\nCREATE DATABASE IF NOT EXISTS \`%s\`;\n GRANT ALL PRIVILEGES ON \`%s\`.* TO 'wp'@'localhost' IDENTIFIED BY 'wp';\n" "$db_name" "$db_name" >> "$path"/database/init-custom.sql

		hooked_pre_vvv_init=$(hook "hooked_pre_vvv_init")
		hooked_extra_wp_vvv_init=$(hook "hooked_extra_wp_vvv_init")
		hooked_post_vvv_init=$(hook "hooked_post_vvv_init")

		{
			echo "$hooked_pre_vvv_init"
			echo "if [ ! -d \"$web_root/wp-admin\" ]; then"
			echo "	echo 'Installing WordPress $version in $site/$web_root...'"
			echo "	if [ ! -d \"./$web_root\" ]; then"
			echo "		mkdir ./$web_root"
			echo "	fi"
			echo "	cd ./$web_root"
			echo "	$install_method"
			echo "	$config"
			echo "	$core"
			echo "	$add_placeholder_content"
			echo "	$db_init"
			echo "  $maybe_remove_defaults"
			echo "  $maybe_download_search_and_replace"
			echo "	$hooked_extra_wp_vvv_init"
			echo "	"
			echo "	cd -"
			echo "$blueprint_text"
			echo "fi"
			echo "$maybe_trunk"
			echo "$hooked_post_vvv_init"
		} >> vvv-init.sh
		hook "post_write_vvv_init"
	fi

	echo "Done"

	# Add vvv-hosts file for domain in the site's "$sites_folder" root
	# =============================================================================
	cd "$path"/"$sites_folder"/"$site" || error "Could not change directory."
	hook "pre_write_vvv_hosts"
	info "Adding $domain to new vvv-hosts file... "
	touch vvv-hosts
	printf "%s\n" "$domain" >> vvv-hosts
	hook "post_write_vvv_hosts"
	echo "Done"

	if [ ! -z "$git_repo" ]; then
		git clone --recursive "$git_repo" $web_root/wp-content
	fi

	# Add site conf file to nginx-config
	# =============================================================================
	cd "$path"/config/nginx-config/sites || error "Could not change directory."
	info "Creating nginx-config/sites/$site.conf... "

	nginx_domain_text="$domain"
	if [[ $multisite = 'y' ]] && [[ $ms_type = 'subdomain' ]]; then
		nginx_domain_text="$domain *.$domain"
	fi
	xip_domain=" ~^$site\\\.\\\d+\\\.\\\d+\\\.\\\d+\\\.\\\d+\\\.xip\\\.io$"
	nginx_domain_text="$nginx_domain_text""$xip_domain"

	sed -e "s/testserver\.com/$nginx_domain_text/" \
		-e "s|wordpress-local|$site/$web_root|" local-nginx-example.conf-sample > "$site".conf

	if [[ $image_proxy = "true" ]]; then
		sed -e $'s|\}| location ~ ^/wp-content/uploads/(.*) \{ if (!-f $request_filename) \{ rewrite ^/wp-content/uploads/(.*)$ http://LIVE_URL/wp-content/uploads/$1 redirect; \} \} \}|' -e "s|LIVE_URL|$live_site_url|" "$site".conf > tmp.conf
		rm "$site".conf
		mv tmp.conf "$site".conf
	fi

	echo "Done"
}


creation_success_message() {
	# OMG we're done.
	# =============================================================================
	if [[ "$files_only" = "true" ]]; then
		info "\nRemember to run \`vagrant up --provision\` to initialize the new site."
	fi

	success "New VVV Site Setup: Done!"
	echo "Directory: $path/$sites_folder/$site"
	echo "URL:       $domain"
	echo "Username:  $username"
	echo "Password:  $password"
	hook "post_site_creation_finished" "$site" "$domain" "$path"
}


create_site() {
	hook "pre_site_creation_questions"
	site_creation_questions
	hook "post_site_creation_questions"
	hook "pre_site_creation_confirm"
	confirm_site_creation
	hook "post_site_creation_confirm"
	hook "pre_site_creation_create_files"
	create_site_files
	hook "post_site_creation_create_files"
	hook "pre_site_creation_vagrant_up"
	run_vagrant_up
	hook "post_site_creation_vagrant_up"
	hook "pre_site_creation_finished_message"
	creation_success_message
	hook "post_site_creation_finished_message"
	exit
}

