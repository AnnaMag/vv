#!/usr/bin/env bash

#
# Variable VVV - A VVV Site Setup Script
# By Brad Parbs <brad@bradparbs.com>
# Originally by Alison Barrett <alison@barre.tt>
#
# Version 2.0.0.beta
#
# Varying Vagrant Vagrants (https://github.com/Varying-Vagrant-Vagrants/VVV).
#
#	 ██    ██ ██    ██
#	░██   ░██░██   ░██ 	  ▓▓▓▓▓▓▓▓▓▓
#	░░██ ░██ ░░██ ░██ 	 ░▓ author ▓ Brad Parbs <brad@bradparbs.com>
#	 ░░████   ░░████         ░▓ github ▓ http://github.com/bradp/vv
#	  ░░██     ░░██          ░▓▓▓▓▓▓▓▓▓▓
#	   ░░       ░░   	  ░░░░░░░░░░
#
# This script automates the creation & deletion of new WordPress sites using
# Varying Vagrant Vagrants (https://github.com/Varying-Vagrant-Vagrants/VVV).
#
# Copyright (C) 2015 Brad Parbs
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.1.6.0
#

version_number=2.0.0.beta
# Set our version number.

if [[ "$1" == "vv_internal_debug" ]]; then
	# We check this before anything else, so we can debug all of vv
	# This will output all the commands that are being run
	set -x
	shift
fi

# Set our colors for output
if [[ ! -z $(which tput) ]]; then
	normal=$(tput sgr0)
	bold=$(tput bold)
	red=$(tput setaf 1)
	green=$(tput setaf 2)
	yellow=$(tput setaf 3)
	magenta=$(tput setaf 5)
	cyan=$(tput setaf 6)
fi


parse_the_args() {

    if [ ! -z "$list" ]; then
    	list_sites
   	fi
    if [ ! -z "$create" ]; then
    	create_site
    fi
    if [ ! -z "$remove" ]; then
    	remove_site
    fi
   	if [ ! -z "$deployment_setup" ]; then
    	deployment_setup
    fi
    if [ ! -z "$deployment_remove" ]; then
    	deployment_removal_prompt
    fi
   	if [ ! -z "$deployment_config" ]; then
   		deployment_config
   	fi
   	if [ ! -z "$blueprint_init" ]; then
		create_blueprints
	fi
	if [ ! -z "$lets_update" ]; then
		install_update
	fi
	if [ ! -z "$force_update" ]; then
		vv_bootstrap_update
	fi
}

check_args() {


	# Set some default variables that will change later.
	use_defaults="false"
	no_wp="false"
	no_wp_with_db="false"
	sites_folder="www"
	skip_restart="true"


	while [ ! -z "$1" ]; do
		case "$1" in
			-h|--help|help|h|what)
				local help=0
				shift
				;;
			-p|--path)
				argument_expected "$1" "$2"
				path=$2
				shift 2
				;;
			-wr|--wr|--web-root|--web_root|--webroot|--directory|--file-path|--filepath)
				argument_expected "$1" "$2"
				web_root=$2
				shift 2
				;;
			-d|--domain)
				argument_expected "$1" "$2"
				domain=$2
				shift 2
				;;
			-u|--live-url|--live_url|--liveurl)
				argument_expected "$1" "$2"
				live_site_url=$2
				shift 2
				;;
			-n|--name)
				argument_expected "$1" "$2"
				site=$2
				shift 2
				;;
			-wv|--wv|--wp-version|--wp_version|--wpversion)
				argument_expected "$1" "$2"
				version=$2
				shift 2
				;;
			--username)
				argument_expected "$1" "$2"
				username=$2
				shift 2
				;;
			--password)
				argument_expected "$1" "$2"
				password=$2
				shift 2
				;;
			--email)
				argument_expected "$1" "$2"
				email=$2
				shift 2
				;;
			--git-repo|--git_repo|--gitrepo|-gr)
				argument_expected "$1" "$2"
				git_repo=$2
				shift 2
				;;
			-m|--multi-site|--multi_site|--multisite)
				argument_expected "$1" "$2"
				ms_type=$2
				shift 2
				;;
			--host)
				argument_expected "$1" "$2"
				host=$2
				shift 2
				;;
			--username)
				argument_expected "$1" "$2"
				username=$2
				shift 2
				;;
			--password)
				argument_expected "$1" "$2"
				password=$2
				shift 2
				;;
			--passive)
				argument_expected "$1" "$2"
				passive=$2
				shift 2
				;;
			--secure)
				argument_expected "$1" "$2"
				secure=$2
				shift 2
				;;
			--destination)
				argument_expected "$1" "$2"
				destination=$2
				shift 2
				;;
			--deployment-name|--deployment_name|--deploymentname)
				argument_expected "$1" "$2"
				deployment_name=$2
				shift 2
				;;
			-b|--blue-print|--blue_print|--blueprint)
				argument_expected "$1" "$2"
				blueprint=$2
				shift 2
				;;
			-v|v|--vagrant|vagrant)
				argument_expected "$1" "$2"
				get_vvv_path
				cd "$path" || error "Could not change directory."
				echo "$(vagrant "$2");"
				exit
				shift 2
				;;
			-db|--database)
				argument_expected "$1" "$2"
				db_import=$2
				shift 2
				;;
			-fsf|--force-sites-folder)
				argument_expected "$1" "$2"
				sites_folder="$2/"
				shift 2
				;;
			-r|-rm|--rm|rm|--remove|remove|--delete|delete|--teardown|teardown)
				remove="true"
				shift
				site="$1"
				shift
				;;
			-l|--list|list|-s|--show|show)
				list="true"
				shift
				;;
			-c|--create|create|-n|--new|new|-m|--make|make)
				create="true"
				shift
				;;
			-i|--images)
				image_proxy="true"
				shift
				;;
			-x|--debug)
				wp_debug="y"
				shift
				;;
			-fp|--fp|--force-path|--force_path|--forcepath)
				force_path="true"
				shift
				;;
			--version)
				version
				shift
				;;
			--debug-vv)
				output_debug_vv
				shift
				;;
			--porcelain)
				clean="true"
				shift
				;;
			--defaults)
				use_defaults="true"
				shift
				;;
			--download-search-and-replace)
				download_search_and_replace="true"
				shift
				;;
			-sc|--sc|--sample-content|--sample_content|--samplecontent)
				placeholder_content="y"
				shift
				;;
			-rd|--rd|--remove-defaults)
				remove_defaults="y"
				shift
				;;
			--prefix|--db-prefix|-dbp)
				argument_expected "$1" "$2"
				db_prefix=$2
				shift 2
				;;
			--language|--locale|--lang|-lang)
				argument_expected "$1" "$2"
				db_lang=$2
				shift 2
				;;
			--about|about)
				about
				exit
				shift
				;;
			--deploy|deploy|--deployment|deployment|--deployment-create|deployment-create|--deploy-create|deploy-create|--deployment-setup|deployment-setup|--deploy-setup|deploy-setup)
				deployment_setup="true"
				shift
				;;
			--deployment-remove|deployment-remove|--deploy-remove|deploy-remove|--deployment-teardown|deployment-teardown|--deploy-teardown|deploy-teardown|--deployment-delete|deployment-delete|--deploy-delete|deploy-delete)
				deployment_remove="true"
				shift
				;;
			--confirm-removal|--confirm_removal|--confirmremoval)
				remove_deployment_confirm="confirm"
				shift
				;;
			--deployment-config|deployment-config|--deploy-config|deploy-config|--deployment-edit|deployment-edit|--deploy-edit|deploy-edit)
				deployment_config="true"
				shift
				;;
			update|--update)
				lets_update="true"
				shift
				;;
			--force-update|--force_update|--forceupdate)
				force_update="true"
				info "Forcing boostrapped update..."
				shift
				;;
			-bi|--bi|bi|--blueprint-init|blueprint-init|--blueprintinit|blueprintinit)
				blueprint_init="true"
				shift
				;;
			--blank)
				no_wp="true"
				shift
				;;
			--blank-with-db)
				no_wp="true"
				no_wp_with_db="true"
				shift
				;;
			--wpskeleton|--skel,-skel)
				wpskeleton="true"
				shift
				;;
			--show-hooks)
				show_hooks="true"
				shift
				;;
			-bed|--bedrock)
				bedrock_init="true"
				web_root="htdocs/web"
				no_wp_with_db="true"
				shift
				;;
			show_commands)
				show_commands
				shift
				;;
			configs)
				show_configs
				exit 0
				;;
			*)
				fail "Unknown option $1"
				shift
				;;
		esac
	done

	if [ ! -z $help ]; then
		show_help $help
	fi

	get_vvv_path
	setup_scripts_folder
	parse_the_args
	exit 0
}

load_modules() {

	vv_install_location="$(which vv)"
	# hacky check for local dev
	vv_install_location="$(pwd)"

	modules="$vv_install_location/modules/*/*"
	# Allow of adding different locations for module to be laoaded
	for module in $modules; do
 		test -f "$module" && . "$module"
	done


	# Because bash will use the second function that gets sourced, this allows us to replace existing modules / functions
	extended_modules_dir="$(pwd)/extended-modules"
	if [ -d "$extended_modules_dir" ]; then

		extended_modules_dir_glob="$(pwd)/extended-modules/*/*"
		echo $extended_modules_dir_glob
		# Allow of adding different locations for module to be laoaded
		for module in $extended_modules_dir_glob; do
	 		test -f "$module" && . "$module"
		done
	fi

}

main() {

	# Load our modules
	load_modules

	# First thing we do is
	auto_update_main

	# If no arguments are passed in, we'll show the help menu
	if [ -z "$1" ]; then
	    show_help
		showing_help="true"
	fi

	# Check for our vv config file
	check_for_config_file

	# @TODO we've already done the auto update check, is this needed?
	check_for_update

	# Check what has been passed in, run the associated commands
	check_args "$@"
}

if [[ "${BASH_SOURCE[0]}" = "${0}" ]]; then
	main "$@"
fi
